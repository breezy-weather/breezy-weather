plugins {
    alias(libs.plugins.androidApplication)
    alias(libs.plugins.kotlinAndroid)
    alias(libs.plugins.kotlinKapt)
    alias(libs.plugins.objectbox).apply(false)
    alias(libs.plugins.daggerHilt)
    alias(libs.plugins.kotlinSerialization)
    alias(libs.plugins.aboutLibraries)
}

android {
    namespace "org.breezyweather"
    compileSdk 34

    defaultConfig {
        applicationId "org.breezyweather"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode 40613
        versionName "4.6.13-beta"

        multiDexEnabled true
        ndk.abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary true
    }

    buildFeatures {
        viewBinding true
        compose true
    }

    splits {
        abi {
            enable true
            reset()
            include "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
            universalApk true
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled true
            shrinkResources true
            debuggable false
            crunchPngs false // No need to do that, we already optimized them
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }

    Properties properties = new Properties()
    if (project.rootProject.file('local.properties').canRead()) {
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
    }
    buildTypes.each {
        it.buildConfigField "String", "DEFAULT_LOCATION_SOURCE", "\"${properties.getProperty("breezy.source.default_location") ?: "native"}\""
        it.buildConfigField "String", "DEFAULT_LOCATION_SEARCH_SOURCE", "\"${properties.getProperty("breezy.source.default_location_search") ?: "openmeteo"}\""
        it.buildConfigField "String", "DEFAULT_WEATHER_SOURCE", "\"${properties.getProperty("breezy.source.default_weather") ?: "openmeteo"}\""
        it.buildConfigField "String", "ACCU_WEATHER_KEY", "\"${properties.getProperty("breezy.accu.key") ?: ""}\""
        it.buildConfigField "String", "ATMO_AURA_KEY", "\"${properties.getProperty("breezy.atmoaura.key") ?: ""}\""
        it.buildConfigField "String", "BAIDU_IP_LOCATION_AK", "\"${properties.getProperty("breezy.baiduip.key") ?: ""}\""
        it.buildConfigField "String", "GEO_NAMES_KEY", "\"${properties.getProperty("breezy.geonames.key") ?: ""}\""
        it.buildConfigField "String", "HERE_KEY", "\"${properties.getProperty("breezy.here.key") ?: ""}\""
        it.buildConfigField "String", "MF_WSFT_JWT_KEY", "\"${properties.getProperty("breezy.mf.jwtKey") ?: ""}\""
        it.buildConfigField "String", "MF_WSFT_KEY", "\"${properties.getProperty("breezy.mf.key") ?: ""}\""
        it.buildConfigField "String", "OPEN_WEATHER_KEY", "\"${properties.getProperty("breezy.openweather.key") ?: ""}\""
        it.buildConfigField "String", "PIRATE_WEATHER_KEY", "\"${properties.getProperty("breezy.pirateweather.key") ?: ""}\""
    }

    sourceSets {
        standard {
            java.srcDirs("src/src_nogplay")
        }
        gplay {
            java.srcDirs("src/src_gplay")
            manifest.srcFile "manifest_gplay/AndroidManifest.xml"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += [
                "-opt-in=androidx.compose.material3.ExperimentalMaterial3Api",
                "-opt-in=androidx.compose.foundation.layout.ExperimentalLayoutApi",
                "-opt-in=kotlinx.serialization.ExperimentalSerializationApi",
                "-opt-in=com.google.accompanist.permissions.ExperimentalPermissionsApi"
        ]
    }

    composeOptions {
        kotlinCompilerExtensionVersion "1.5.6"
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            unitTests.returnDefaultValues = true
        }
    }

    flavorDimensions = ["default"]
    productFlavors {
        standard {
            dimension "default"
        }
        gplay {
            dimension "default"
            versionNameSuffix "_gplay"
        }
    }

    lint {
        abortOnError false
        checkReleaseBuilds false
    }
}

configurations {
    cleanedAnnotations
    compile.exclude group: "org.jetbrains", module: "annotations"
}

kapt {
    correctErrorTypes true
}

// Workaround for https://youtrack.jetbrains.com/issue/KT-55947/Unable-to-set-kapt-jvm-target-version
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KaptGenerateStubs).configureEach {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation libs.core.ktx
    implementation libs.appcompat
    implementation libs.material

    implementation libs.cardview
    implementation libs.swiperefreshlayout

    implementation libs.activity.compose
    implementation libs.compose.material.ripple
    implementation libs.compose.animation
    implementation libs.compose.ui.tooling
    implementation libs.compose.ui.util
    implementation libs.compose.foundation
    implementation libs.compose.material3
    implementation libs.compose.material.icons
    implementation libs.navigation.compose

    implementation libs.accompanist.permissions

    testImplementation libs.bundles.test

    // preference.
    implementation libs.preference.ktx

    // db
    debugImplementation libs.objectbox.androidobjectbrowser
    releaseImplementation libs.objectbox.android

    // work.
    implementation libs.work.runtime

    // lifecycle.
    implementation libs.bundles.lifecycle
    implementation libs.recyclerview

    // hilt.
    implementation libs.dagger.hilt.core
    kapt libs.dagger.hilt.compiler
    implementation libs.hilt.work
    kapt libs.hilt.compiler

    // gms.
    gplayImplementation libs.gms.location

    // coil
    implementation libs.coil

    // HTTP
    implementation libs.bundles.retrofit
    implementation libs.bundles.okhttp
    implementation libs.kotlinx.serialization.retrofitconverter
    implementation libs.kotlinx.serialization.json

    // data store
    // implementation "androidx.datastore:datastore-preferences:1.0.0"

    // jwt
    implementation libs.jjwt.api
    runtimeOnly libs.jjwt.impl
    runtimeOnly(libs.jjwt.orgjson) {
        exclude group: "org.json", module: "json" //provided by Android natively
    }

    // rx java.
    implementation libs.rxjava
    implementation libs.rxandroid
    implementation libs.kotlinx.coroutines.rx3

    // ui.
    implementation libs.adaptiveiconview
    implementation libs.activity.ktx
    implementation libs.expandabletextcompose

    // utils.
    implementation libs.suncalc
    implementation libs.lunarcalendar
    implementation libs.aboutLibraries

    // debugImplementation because LeakCanary should only run in debug builds.
    //debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.11'
}

// Apply last to be able to have ObjectBrowser
apply plugin: 'io.objectbox'